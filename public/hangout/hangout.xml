<?xml version="1.0" encoding="UTF-8" ?>
<Module>
<!-- Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License. You may obtain a copy of
 * the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *      
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License
-->
<ModulePrefs title="Unhangout Manager">
        <Require feature="rpc" />
        <Require feature="views" />
</ModulePrefs>
<Content type="html"><![CDATA[
<html>
	<script src="//cdnjs.cloudflare.com/ajax/libs/jquery/1.8.2/jquery.min.js" ></script>
	<script src="//cdnjs.cloudflare.com/ajax/libs/underscore.js/1.4.1/underscore-min.js" ></script>
	<script src="//plus.google.com/hangouts/_/api/v1/hangout.js"></script>

<script type="text/template" id="welcome-template">
    <h1 class='title'>{{ title }}<div class="hide">hide</div></h1>
    <p class='description'>{{ description }}</p>
    <hr>
    <div id="share" class="button active">SHARE</div> <div id="about" class="button">ABOUT</div>

    <div id="share-contents">
    <p>To share a permalink for this hangout, use the link below:</p>
    <form>
      <input type='text' value="{{ baseURL }}/h/{{ shortURL }}">
    </form>
	</div>

	<div id="about-contents">
		<p>You are in a hangout managed by the Unhangout Permalink system.</p>

		<p>To help the Permalink service know when your hangout ends or when someone joins or leaves, we use an app called <em>Unhangout Supervisor</em>. You should see it on the left edge of your screen. You can hide this panel if you like (by clicking 'hide'), but it's important that you let the app run so the Permalink system can keep tabs on it.</p>

		<p>If you have any questions or feedback or comments about this service, please don't hesitate to message me <a href="http://twitter.com/drewwww">@drewwww</a> on Twitter, or email me at <a href="mailto:dharry@media.mit.edu">dharry@media.mit.edu</a></p>
	</div>
</script>

<script type="text/template" id="welcome-unhangout-template">
    <h1 class='title'>{{ title }}<div class="hide">hide</div></h1>
    <h2 class='event'>Part of '{{ eventTitle }}'</he>
</script>


<script type="text/template" id="footer-template">
  <div class="footer">powered by <a href="http://unhangout.media.mit.edu/">unhangout</a>, from the MIT Media Lab</div>
</script>

<script>

var baseServerUrl;
var sessionId;
var interval;
var serverUrl;
var title;
var description;
var shortURL;
var isPermalink;
var eventTitle;

var localGoogleId;
var isLeader = false;

// five seconds is a reasonable starting time.
var HEARTBEAT_INTERVAL = 5000;

function init() {
	console.log("init running");
		gapi.hangout.onApiReady.add(
	      function(eventObj) {
	        if (eventObj.isApiReady) {
    			  // When API is ready...                                                         
    				console.log("READY!");

    				// we expect that appData has format:
    				// host:port:sessionid
    				// unpack that and post it back to the server.
    				var appData = gadgets.views.getParams()['appData'];

    				// it's not clear if this actually helps. It seems like in any situation I can create where the app is actually 
    				// loaded, the appData is present in the views params. Leaving the code present but knocked out
    				// in case we find a need for it in the future.

    				//if(_.isUndefined(appData)) {
    				//	// try to pull it from the hangout data store.
    				//	appData = gapi.hangout.data.getValue("appData");
    				//	console.log("No app data present in view params, loaded from datastore: " + appData);
    				//} else {
    				//	gapi.hangout.data.setValue("appData", appData);
    				//}

    				console.log(appData);

    				// TODO if the app is started without app data, note it in the logs.
    				var appDataPieces = appData.split(":");
    				
    				baseServerUrl = "http://" + appDataPieces[0] + ":" + appDataPieces[1];
    				sessionId = appDataPieces[2];
    				serverUrl = baseServerUrl + "/session/hangout/" + sessionId;
		            title = appDataPieces[3].replace("|", ":");
		            description = appDataPieces[4].replace("|", ":");
		            shortURL = appDataPieces[5];
		            isPermalink = appDataPieces[6]=="true";
		            eventTitle = appDataPieces[7];

		            if(title.length < 1) {
		            	title = shortURL;
		            }

		            console.log("eventTitle: " + eventTitle);
		            console.log("title: " + title);
		            console.log("isPermalink: " + isPermalink);


    				localGoogleId = gapi.hangout.getParticipantById(gapi.hangout.getLocalParticipantId()).person.id;

    				// add this participant id to the shared state list of participants.
    				// this lets us know who is actually running the app, for elections.

    				var participantIds = getInitializedIds();

    				participantIds.push(localGoogleId);
    				gapi.hangout.data.setValue("initializedUserIds", JSON.stringify(participantIds));

    				// now, phone home.
    				loaded(eventObj);		

    				performElection();

    				// all clients should perform the election check on every participant changed event, on top of
    				// whatever other listener gets added if they decide they're the leader.
    				gapi.hangout.onParticipantsChanged.add(nonLeaderParticipantsChangedHandler);
            // Underscore Templates for Hangouts Views

            _.templateSettings = {
              interpolate : /\{\{(.+?)\}\}/g
            };

            if(isPermalink) {
            	console.log("displaying permalink page");
	            var welcome = _.template($("#welcome-template").html());

	            $('body').append(welcome({
	              title : title,
	              description : description,
	              shortURL : shortURL,
	              baseURL:baseServerUrl
	            }));
            } else {
            	console.log("displaying non-permalink page");
				var welcome = _.template($("#welcome-unhangout-template").html())            ;
				$('body').append(welcome({
					title: title,
					eventTitle: eventTitle
				}));
            }

            var footer = _.template($('#footer-template').html());

            $('body').append(footer());

            $("#about-contents").hide();

            var bothButtons = $("#about-contents, #share-contents");

            $(".button").click(function() {
            	bothButtons.hide();

            	$("#" + this.id + "-contents").show();
            	$(".active").removeClass("active");
            	$(this).addClass("active");
            });

            $(".hide").click(function() {
            	console.log("Hiding app on click");
	            gapi.hangout.hideApp();
            });
          }  // End of IF block

      }); // End of handler

} // End of Init


	function getInitializedIds() {
		var initializedIdsRaw = gapi.hangout.data.getValue("initializedUserIds");
		if(!_.isUndefined(initializedIdsRaw) && initializedIdsRaw !="undefined") {
			participantIds = JSON.parse(initializedIdsRaw);
		} else {
			participantIds = [];
		}

		return participantIds;
	}


	// This function sets up all the callbacks necessary to keep the unhangout-server 
	// aprised of the activity in the hangout. This should be called when this client is
	// convinced that it should be in charge of that communication.
	function takeControl() {
		console.log("TAKE CONTROL");
		// setup a heartbeat call so the server can tell when hangouts close.	
		interval = setInterval(function() {
			sendHeartbeat();
		}, HEARTBEAT_INTERVAL);		

	    gapi.hangout.onParticipantsChanged.add(sendParticipantsUpdate);

	    // trigger an update immediately in case we missed the change event for our own entry.
	    // this is actually the default situation. For whatever reason, onParticipantsChanged
	    // will fire BEFORE onApiReady in basically all conditions I've seen. So if we wait until
	    // after apiReady to takeControl(), then we won't send a participant message. 
	    // As a result, we force an update immediately using the current full list just to make
	    // sure we're up to date. This also helps around control handoffs, where someone
	    // could conceivably join in the gap between 
	    sendParticipantsUpdate({participants:gapi.hangout.getParticipants()});

	    isLeader = true;
	}

	// the inverse of take control. stops sending heartbeats, and stops watching for
	// participants joining/leaving.
	function releaseControl() {
		console.log("RELEASE CONTROL");
		clearInterval(interval);

		gapi.hangout.onParticipantsChanged.remove(sendParticipantsUpdate);

		isLeader = false;
	}


	function loaded(eventObj) {
		$.post(serverUrl, {
			type: "loaded",
			url: gapi.hangout.getHangoutUrl(),
			participant: localGoogleId
		}).done(function() {
			console.log("loaded success!");
		}).fail(function() {
			console.log("loaded failure");
		});
	}

	function sendParticipantsUpdate(eventObj) {
		// this event seems to trigger twice early on in the life of a hangout. once on load,
		// and then again about 5 minutes later. Not sure why that is.
		console.log("participants changed, current participants: " + JSON.stringify(eventObj.participants));

		// TODO also, check if the user who left was in the shared state userid list. 

		$.post(serverUrl, {
			type: "participants",
			participants: eventObj.participants
		}).done(function() {
			console.log("participants success!");
		}).fail(function() {
			console.log("participants failure");
		});
	}

	function sendHeartbeat(eventObj) {
		$.post(serverUrl, {
			type:"heartbeat",
			from:gapi.hangout.getLocalParticipantId()
		}).done(function() {
			console.log("heartbeat success!");
		}).fail(function() {
			console.log("heartbeat fail");
		});
	}

	function compareGoogleIds(a, b) {
		// google ids are too long to treat as integers
		// so, split them up and basically do two sucessive
		// comparisons.

		var aLeft = parseInt(a.slice(0, 11));
		var bLeft = parseInt(b.slice(0, 11));
		if( aLeft != bLeft) {
			return aLeft > bLeft ? 1 : -1;
		} else {
			// if they're the same, return comparison on the lsb.
			return parseInt(a.slice(11, 22)) > parseInt(b.slice(11, 22)) ? 1 : -1;
		}
	}

	function getLeaderId() {
		// get a list of participants, filter it out to just be ids. then sort it.

		// pull from the shared state, so we don't accidentally nominate someone who
		// isn't running the hangout app.
		var participants = getInitializedIds();
	
		console.log("during election, participants: " + JSON.stringify(participants));

		// TODO these clauses may not be necessary, now that we wait for a stateChange
		// event to fire before we run elections.		
		if(participants.length==0) {
			participants.push(localGoogleId);
		}		

		// because this happens so soon after we call setValue, our localId isn't
		// necessarily included.
		if(participants.indexOf(localGoogleId)==-1) {
			participants.push(localGoogleId);
		}

		// TODO consider trying the native lexographic search. It might actually work fine on long strings since they
		// have a fixed length.
		participants.sort(compareGoogleIds);
		participants.reverse();

		return participants[0];
	}

	// whenever we get a participantsChanged event, we'll wait to see if
	// initializedParticipantIds changes in shared hangout state. If it does,
	// then perform the election on the NEW version of that list. If we wait for
	// a second or two and no update occurs, then we know that the new user
	// doens't have the hangout app running, and so we don't need to perform
	// an election.
	function nonLeaderParticipantsChangedHandler() {

		// a participantsChanged event fires in two cases:
		// 1. someone joined
		// 2. someone left
		// If someone joined, they are responsible for adding themselves to
		// the initializedUserIds list (if they're running the app)
		// When someone leaves, 

		// so the first step here is to figure out whether or not someone
		// left. We'll do this by comparing the list of current participants
		// with the list in the shared channel.
		var initializedIds = getInitializedIds();

		var allParticipantIds = _.map(gapi.hangout.getParticipants(), function(p) {
			return p.person.id;
		});

		// now look and see if there are any ids that are in the initialized list
		// that are no longer in the allParticipantIds list.
		var missingId = null;
		_.each(initializedIds, function(id) {
			if(allParticipantIds.indexOf(id)==-1) {
				missingId = id;
			}
		});

		if(missingId!=null) {
			console.log("found missing id of leaver: " + missingId);

			initializedIds.splice(initializedIds.indexOf(missingId), 1);

			console.log("initializedIds: " + JSON.stringify(initializedIds));
			gapi.hangout.data.setValue("initializedUserIds", JSON.stringify(initializedIds));
		}

		console.log("Waiting for state changed updates");
		// since right now there is only one potential thing that could trigger stateChanged,
		// we can perform election on any stateChanged event.
		gapi.hangout.data.onStateChanged.add(performElection);
	}


	function performElection() {
		console.log("PERFORMING ELECTION (after state changed event fired");

		// remove the listener now, since we only want it to fire once.
		gapi.hangout.data.onStateChanged.remove(performElection)

		if(getLeaderId() == localGoogleId) {
			if(isLeader) {
				// already the leader, and supposed to be the leader.
				return;
			} else {
				takeControl();
			}
		} else {
			if(isLeader) {
				// we're not supposed to be the leader anymore. abdicate!
				releaseControl();
			}
		}
	}

// Wait for gadget to load.                                                       
gadgets.util.registerOnLoadHandler(init);
</script>

  <style>
  	body {
  		font-family: "Helvetica Neue", Helvetica, Arial, sans-serif;
  	}

    .title {
      font-weight: 200;
      color: #aaa;
      text-shadow: 0px -1px 0px rgba(0, 0, 0, 0.25);

      background-color: rgb(51, 51, 51);

      padding: 20px;

      font-size: 26px;
    }	

    .footer {
    	position: absolute;
    	bottom: 0px;

    	font-size: 12px;
    	color: #999;
    	background-color: rgb(51, 51, 51);

    	width: 100%;

    	padding: 10px;
	}

	.footer a {
		text-decoration: none;
		font-weight: bold;

		color: #ccc;
	}

	.footer a:hover {
		text-decoration: underline;
	}

	.footer a:visited {
		color: #ccc;
	}

	input {
		margin: 5px;
		width: 290px;
		height: 30px;
		font-size: 16px;
	}

	p {
		margin: 5px;
		margin-bottom: 15px;
	}

	hr {
		margin: 15px;
	}

	.button {
		border-radius: 5px;

		background-color: rgb(51, 51, 51);
		color: #bbb;

		cursor: pointer;

		float: left;

		width: 130px;
		padding: 5px;

		margin-left: 10px;

		text-align: center;

		margin-bottom: 10px;
	}

	.active {
		color: white;
		font-weight: bold;
	}

	.event {
		font-weight: normal;
		font-size: 16px;
		padding: 10px;
	}

	.hide {
		color: #bbb;
		position: absolute;
		font-size: 16px;
		right: 10px;
		top: 10px;
		cursor: pointer;

		font-style: italic;
	}

	.hide:hover {
		background-color: #555;
		color: white;
	}

  </style>

<body>


</body>
]]>
</Content>
</Module>
